pyspark --packages org.apache.spark:spark-streaming-kafka_2.10:1.3.0

spark-submit --packages org.apache.spark:spark-streaming-kafka_2.10:1.3.0 pyspark.py localhost:2181 airline_ontime | tee foobar.txt

# create topic
bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic airline_ontime

# start kafka server
bin/kafka-server-start.sh config/server.properties

# Start producer
hadoop fs -cat /user/root/test/On_Time_On_Time_Performance_1989_10.txt | bin/kafka-console-producer.sh --broker-list localhost:9092 --topic airline_ontime

lines = sc.textFile("hdfs://sandbox.hortonworks.com/user/root/test/On_Time_On_Time_Performance_1989_10.txt").cache()

spark-submit --packages org.apache.spark:spark-streaming-kafka_2.10:1.3.0,TargetHolding:pyspark-cassandra:0.2.7 --jars /usr/share/cassandra/lib/metrics-core-2.2.0.jar,/usr/share/cassandra/lib/metrics-annotation-2.2.0.jar carrierandairport_2.py localhost:2181 airline_ontime | tee foobar.txt

stmnt = "INSERT INTO results2_1 (origin, carrier, depdelay, total) VALUES ('foo', 'bar', 1, 1);\n"
p = subprocess.Popen("cqlsh -k mykeyspace", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=PIPE, shell=True, bufsize=0)
p.stdin.write(stmnt)
out = p.stdout.readline()


CREATE TABLE results2_1 (origin text, carrier text, depdelay counter, total counter PRIMARY KEY(origin, carrier)) WITH CLUSTERING ORDER BY (carrier ASC);


CREATE TABLE results2_2 (origin text, dest text, depdelay counter, total counter, PRIMARY KEY(origin, dest)) WITH CLUSTERING ORDER BY (dest ASC);


CREATE TABLE results2_3 (origin text, dest text, carrier text, arrdelay counter, total counter, PRIMARY KEY(origin, dest, carrier)) WITH CLUSTERING ORDER BY (dest ASC, carrier ASC);



CREATE TABLE results3_2 (id text, flightno int, origin text, dest text, carrier text, date text, dep_time int, arrival_delay int, PRIMARY KEY(id));


library(RJDBC)
cassdrv <- JDBC("org.apache.cassandra.cql.jdbc.CassandraDriver", list.files("/usr/share/cassandra/lib",pattern="jar$",full.names=T))
casscon <- dbConnect(cassdrv, "jdbc:cassandra://localhost:9160/mykeyspace")
res <- dbGetQuery(casscon, "select * from results2_1 limit 10")

